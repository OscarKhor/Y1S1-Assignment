#include <iostream>
#include <string>
#include <map>
#include <iomanip>
#include <cctype>  // For tolower

using namespace std;

class Service {
public:
    string name;
    double price;
    int duration; // Duration in hours
    Service(string n = "", double p = 0.0, int d = 0) : name(n), price(p), duration(d) {}
};

class Expert {
public:
    string name;
    int maxHoursPerWeek;
    int hoursWorked;
    int hoursPerDay[12][30]; // Hours booked per day in each month

    Expert(string n = "") : name(n), maxHoursPerWeek(30), hoursWorked(0) {
        // Initialize all days to 0 hours booked
        for (int month = 0; month < 12; ++month) {
            for (int day = 0; day < 30; ++day) {
                hoursPerDay[month][day] = 0;
            }
        }
    }

    bool canWork(double additionalHours) const {
        return (hoursWorked + additionalHours <= maxHoursPerWeek);
    }

    bool canAddHours(int month, int day, double additionalHours) const {
        return (hoursPerDay[month - 1][day - 1] + additionalHours <= 6); //  6 hours max per day
    }

    void addHours(int month, int day, double additionalHours) {
        hoursPerDay[month - 1][day - 1] += additionalHours;
        hoursWorked += additionalHours;
    }
};

class Customer {
public:
    string name;
    struct Booking {
        string serviceName;
        int month;
        string expertName;
    };
    Booking bookedServices[100]; // Array of bookings, assuming max 100 bookings
    int bookingCount;

    Customer(string n = "") : name(n), bookingCount(0) {}
};

class BeautyServiceApp {
private:
    Service services[10]; // Assuming max 10 services
    Expert experts[10];   // Assuming max 10 experts
    Customer customers[100]; // Assuming max 100 customers
    int serviceCount;
    int expertCount;
    int customerCount;

    // For admin login and registration
    map<string, string> adminCredentials; // Stores admin credentials
    bool isAdminLoggedIn = false; // Flag to track admin login status

    // Simplified case-insensitive comparison function
    static bool caseInsensitiveEqual(const string& str1, const string& str2) {
        if (str1.size() != str2.size()) return false;
        for (size_t i = 0; i < str1.size(); ++i) {
            if (tolower(str1[i]) != tolower(str2[i])) return false;
        }
        return true;
    }

public:
    BeautyServiceApp() : serviceCount(0), expertCount(0), customerCount(0) {
        // Initialize services and experts
        services[serviceCount++] = Service("Facial", 50.0, 2);
        services[serviceCount++] = Service("Makeup", 70.0, 2);
        services[serviceCount++] = Service("Manicure", 30.0, 2);
        services[serviceCount++] = Service("Consultation", 20.0, 1);

        experts[expertCount++] = Expert("Alice");
        experts[expertCount++] = Expert("Bob");
        experts[expertCount++] = Expert("Cathy");

        // Adding a default admin (for initial testing)
        adminCredentials["admin"] = "adminpass";
    }

    void showLogo() {
        cout << "\033[1;36m";
        cout << "*****   *****     ****      **  **  ******  **  **\n";
        cout << "**  **  **       **  **     **  **    **     **** \n";
        cout << "*****   ****    ********    **  **    **      **  \n";
        cout << "**  **  **     **      **   **  **    **      **  \n";
        cout << "*****   ***** **        **   ****     **      **  \n";
        cout << "\033[0m";

        cout << endl;

        cout << "\033[1;35m";
        cout << "*****  *****  ****    **   **  ******  ******  *****   *****\n";
        cout << "**     **     **  **   ** **     **    **      **      **   \n";
        cout << "*****  ****   ******    ***      **    **      ****    *****\n";
        cout << "   **  **     ** **     ***      **    **      **         **\n";
        cout << "*****  *****  **  **     *     ******  ******  *****   *****\n";
        cout << "\033[0m";
        cout << "\n";
    }
    void showMainMenu() {
        int choice;
        do {
            cout << "1. Customer Menu" << endl;
                      cout << "2. Admin Menu" << endl;
            cout << "3. Exit" << endl;
            cout << "Enter your choice: ";
            cin >> choice;

            switch (choice) {
            case 1: customerMenu(); break;
            case 2: adminMenu(); break;
            case 3: cout << "Exiting..." << endl; break;
            default: cout << "Invalid choice. Please try again." << endl;
            }
        } while (choice != 3);
    }

    void customerMenu() {
        int choice;
        do {
            cout << "1. View Organization Details" << endl;
            cout << "2. View Services and Experts" << endl;
            cout << "3. Check Schedule" << endl;
            cout << "4. Book Service" << endl;
            cout << "5. View Booked Schedule" << endl;
            cout << "6. Back to Main Menu" << endl;
            cout << "Enter your choice: ";
            cin >> choice;

            switch (choice) {
            case 1: viewOrganizationDetails(); break;
            case 2: viewServicesAndExperts(); break;
            case 3: checkSchedule(); break;
            case 4: bookService(); break;
            case 5: viewBookedSchedule(); break;
            case 6: break;
            default: cout << "Invalid choice. Please try again." << endl;
            }
        } while (choice != 6);
    }

    void adminMenu() {
        if (!isAdminLoggedIn) {
            cout << "1. Register Admin" << endl;
            cout << "2. Login Admin" << endl;
            cout << "3. Back to Main Menu" << endl;
            cout << "Enter your choice: ";
            int choice;
            cin >> choice;

            switch (choice) {
            case 1: registerAdmin(); break;
            case 2: loginAdmin(); break;
            case 3: break;
            default: cout << "Invalid choice. Please try again." << endl;
            }
        }
        else {
            int choice;
            do {
                cout << "1. View Individual Schedule" << endl;
                cout << "2. View Overall Schedule" << endl;
                cout << "3. View Customers" << endl;
                cout << "4. Generate Sales Report" << endl;
                cout << "5. Logout" << endl;
                cout << "6. Back to Main Menu" << endl;
                cout << "Enter your choice: ";
                cin >> choice;

                switch (choice) {
                case 1: {
                    string expertName;
                    cout << "Enter the expert's name: ";
                    cin >> expertName;
                    viewIndividualSchedule(expertName);
                    break;
                }
                case 2: viewOverallSchedule(); break;
                case 3: viewCustomers(); break;
                case 4: generateSalesReport(); break;
                case 5:
                    isAdminLoggedIn = false;
                    cout << "Logged out successfully." << endl;
                    return; // Return to main menu after logout
                case 6: return; // Return to main menu if selected
                default: cout << "Invalid choice. Try again." << endl;
                }
            } while (choice != 6);
        }
    }

    void registerAdmin() {
        string username, password;
        cout << "Enter a new username: ";
        cin >> username;
        cout << "Enter a new password: ";
        cin >> password;

        if (adminCredentials.find(username) != adminCredentials.end()) {
            cout << "Username already exists. Please try again." << endl;
        } else {
            adminCredentials[username] = password;
            cout << "Registration successful. You can now log in." << endl;
        }
    }

    void loginAdmin() {
        string username, password;
        cout << "Enter username: ";
        cin >> username;
        cout << "Enter password: ";
        cin >> password;

        if (adminCredentials.find(username) != adminCredentials.end() &&
            adminCredentials[username] == password) {
            isAdminLoggedIn = true;
            cout << "Login successful. Welcome, " << username << "!" << endl;
        } else {
            cout << "Invalid username or password. Please try again." << endl;
        }
    }

    void viewOrganizationDetails() {
        cout << endl;
        cout << "Welcome to Beauty Services!" << endl;
        cout << endl;
        cout << "About Us:" << endl;
        cout << "Beauty Services, founded in 2010, focuses on delivering cutting-edge skincare and beauty solutions." << endl;
        cout << "Our mission is to prioritize quality, safety, and efficacy in all our services." << endl;
        cout << endl;
        cout << "Our services:" << endl;
        cout << "Facials           : Rejuvenate your skin with our custom facials." << endl;
        cout << "Makeup Application: Perfect your look for any occasion with our expert makeup artists." << endl;
        cout << "Manicure          : Improves the overall look of your nails and hands." << endl;
        cout << "Consultation      : Get personalized beauty advice and recommendations." << endl;
        cout << endl;
        cout << "Location          : 123 Beauty St." << endl;
        cout << endl;
        cout << "Online Presence:" << endl;
        cout << "Google            : www.Beautyservices.com" << endl;
        cout << "Instagram         : @Beautyservices" << endl;
        cout << "Facebook          : /Beautyservices" << endl;
        cout << endl;
        cout << "Customer Support:" << endl;
        cout << "Contact           : 555-1234" << endl;
        cout << "Email             : BeautyServices@gmail.com" << endl;
        cout << endl;
    }

    void viewServicesAndExperts() {
        cout << endl;
        cout << setfill('-') << setw(80) << "" << setfill(' ') << endl;
        cout << left << setw(25) << "Service Name" << setw(10) << "Price" << setw(15) << "Duration (hrs)" << setw(30) << "Available Experts" << endl;
        cout << setfill('-') << setw(80) << "" << setfill(' ') << endl;

        // Display services and prices
        for (int i = 0; i < serviceCount; ++i) {
            cout << left << setw(25) << services[i].name;
            cout << setw(10) << fixed << setprecision(2) << services[i].price;
            cout << setw(15) << services[i].duration;
            bool first = true;
            for (int j = 0; j < expertCount; ++j) {
                if (first) {
                    cout << experts[j].name;
                    first = false;
                }
                else {
                    cout << ", " << experts[j].name;
                }
            }
            cout << endl;
        }
        cout << setfill('-') << setw(80) << "" << setfill(' ') << endl;
        cout << endl;
    }

    void checkSchedule() {
        string expertName;
        cout << "Enter the expert's name: ";
        cin >> expertName;

        Expert* expert = nullptr;
        for (int i = 0; i < expertCount; ++i) {
            if (caseInsensitiveEqual(experts[i].name, expertName)) {
                expert = &experts[i];
                break;
            }
        }

        if (expert) {
            cout << "Schedule for " << expert->name << ":" << endl;
            cout << setfill('-') << setw(50) << "" << setfill(' ') << endl;
            cout << left << setw(15) << "Month" << setw(15) << "Day" << setw(20) << "Hours Booked" << endl;
            cout << setfill('-') << setw(50) << "" << setfill(' ') << endl;

            for (int month = 0; month < 12; ++month) {
                for (int day = 0; day < 30; ++day) {
                    if (expert->hoursPerDay[month][day] > 0) {
                        cout << left << setw(15) << month + 1 << setw(15) << day + 1 << setw(20) << expert->hoursPerDay[month][day] << endl;
                    }
                }
            }
            cout << setfill('-') << setw(50) << "" << setfill(' ') << endl;
        }
        else {
            cout << "Expert not found!" << endl;
        }
        cout << endl;
    }

    void bookService() {
        string customerName;
        string serviceName;
        string expertName;
        int month, day;

        cout << "Enter your name: ";
        cin >> customerName;
        cout << "Enter the service name: ";
        cin >> serviceName;
        cout << "Enter the expert's name: ";
        cin >> expertName;
        cout << "Enter the month (1-12): ";
        cin >> month;
        cout << "Enter the day (1-30): ";
        cin >> day;

        bool serviceFound = false;
        bool expertFound = false;

        Service* selectedService = nullptr;
        Expert* selectedExpert = nullptr;

        // Find the service
        for (int i = 0; i < serviceCount; ++i) {
            if (caseInsensitiveEqual(services[i].name, serviceName)) {
                selectedService = &services[i];
                serviceFound = true;
                break;
            }
        }

        // Find the expert
        for (int i = 0; i < expertCount; ++i) {
            if (caseInsensitiveEqual(experts[i].name, expertName)) {
                selectedExpert = &experts[i];
                expertFound = true;
                break;
            }
        }

        if (!serviceFound || !expertFound) {
            cout << "Service or Expert not found. Please check the names and try again." << endl;
            return;
        }

        // Check if the expert has enough total hours available
        if (!selectedExpert->canWork(selectedService->duration)) {
            cout << "Expert does not have enough total hours available." << endl;
            return;
        }

        // Check if adding the service's duration on the selected day is possible
        if (!selectedExpert->canAddHours(month, day, selectedService->duration)) {
            cout << "The selected day has reached its maximum allowed hours." << endl;
            return;
        }

        // Proceed to book the service
        selectedExpert->addHours(month, day, selectedService->duration);

        // Find or create the customer
        Customer* customer = nullptr;
        for (int i = 0; i < customerCount; ++i) {
            if (caseInsensitiveEqual(customers[i].name, customerName)) {
                customer = &customers[i];
                break;
            }
        }

        if (!customer) {
            customer = &customers[customerCount++];
            customer->name = customerName;
        }

        customer->bookedServices[customer->bookingCount].serviceName = serviceName;
        customer->bookedServices[customer->bookingCount].month = month;
        customer->bookedServices[customer->bookingCount].expertName = expertName;
        customer->bookingCount++;

        cout << "Service booked successfully!" << endl;
    }

    void viewBookedSchedule() {
        string customerName;
        cout << "Enter your name: ";
        cin >> customerName;

        Customer* customer = nullptr;
        for (int i = 0; i < customerCount; ++i) {
            if (caseInsensitiveEqual(customers[i].name, customerName)) {
                customer = &customers[i];
                break;
            }
        }

        if (customer) {
            cout << "Booked Services for " << customer->name << ":" << endl;
            cout << setfill('-') << setw(50) << "" << setfill(' ') << endl;
            cout << left << setw(20) << "Service Name" << setw(15) << "Month" << setw(15) << "Expert Name" << endl;
            cout << setfill('-') << setw(50) << "" << setfill(' ') << endl;

            for (int i = 0; i < customer->bookingCount; ++i) {
                cout << left << setw(20) << customer->bookedServices[i].serviceName;
                cout << setw(15) << customer->bookedServices[i].month;
                cout << setw(15) << customer->bookedServices[i].expertName << endl;
            }

            cout << setfill('-') << setw(50) << "" << setfill(' ') << endl;
        }
        else {
            cout << "No bookings found for " << customerName << "." << endl;
        }
        cout << endl;
    }

    void viewIndividualSchedule(const string& expertName) {
        Expert* expert = nullptr;
        for (int i = 0; i < expertCount; ++i) {
            if (caseInsensitiveEqual(experts[i].name, expertName)) {
                expert = &experts[i];
                break;
            }
        }

        if (expert) {
            cout << "Schedule for " << expert->name << ":" << endl;
            cout << setfill('-') << setw(80) << "" << setfill(' ') << endl;
            cout << left << setw(15) << "Month" << setw(15) << "Day" << setw(20) << "Hours Booked" << endl;
            cout << setfill('-') << setw(80) << "" << setfill(' ') << endl;

            for (int month = 0; month < 12; ++month) {
                for (int day = 0; day < 30; ++day) {
                    if (expert->hoursPerDay[month][day] > 0) {
                        cout << left << setw(15) << month + 1 << setw(15) << day + 1 << setw(20) << expert->hoursPerDay[month][day] << endl;
                    }
                }
            }
            cout << setfill('-') << setw(80) << "" << setfill(' ') << endl;
        }
        else {
            cout << "Expert not found!" << endl;
        }
        cout << endl;
    }

    void viewOverallSchedule() {
        cout << "Overall Schedule:" << endl;
        cout << setfill('-') << setw(80) << "" << setfill(' ') << endl;
        cout << left << setw(15) << "Expert" << setw(15) << "Month" << setw(15) << "Day" << setw(20) << "Hours Booked" << endl;
        cout << setfill('-') << setw(80) << "" << setfill(' ') << endl;

        for (int i = 0; i < expertCount; ++i) {
            for (int month = 0; month < 12; ++month) {
                for (int day = 0; day < 30; ++day) {
                    if (experts[i].hoursPerDay[month][day] > 0) {
                        cout << left << setw(15) << experts[i].name << setw(15) << month + 1 << setw(15) << day + 1 << setw(20) << experts[i].hoursPerDay[month][day] << endl;
                    }
                }
            }
        }
        cout << setfill('-') << setw(80) << "" << setfill(' ') << endl;
        cout << endl;
    }

    void viewCustomers() {
        cout << "List of Customers:" << endl;
        cout << setfill('-') << setw(30) << "" << setfill(' ') << endl;
        cout << left << setw(25) << "Customer Name" << endl;
        cout << setfill('-') << setw(30) << "" << setfill(' ') << endl;

        for (int i = 0; i < customerCount; ++i) {
            cout << left << setw(25) << customers[i].name << endl;
        }
        cout << setfill('-') << setw(30) << "" << setfill(' ') << endl;
        cout << endl;
    }

    void generateSalesReport() {
        cout << "Sales Report:" << endl;
        cout << setfill('-') << setw(50) << "" << setfill(' ') << endl;
        cout << left << setw(20) << "Service Name" << setw(15) << "Total Sales" << endl;
        cout << setfill('-') << setw(50) << "" << setfill(' ') << endl;

        double sales[10] = { 0 }; // Assuming 10 services
        for (int i = 0; i < customerCount; ++i) {
            for (int j = 0; j < customers[i].bookingCount; ++j) {
                for (int k = 0; k < serviceCount; ++k) {
                    if (caseInsensitiveEqual(services[k].name, customers[i].bookedServices[j].serviceName)) {
                        sales[k] += services[k].price;
                    }
                }
            }
        }

        for (int i = 0; i < serviceCount; ++i) {
            cout << left << setw(20) << services[i].name;
            cout << setw(15) << fixed << setprecision(2) << sales[i] << endl;
        }

        cout << setfill('-') << setw(50) << "" << setfill(' ') << endl;
        cout << endl;
    }
};

int main() {
    BeautyServiceApp app;
    app.showLogo();
    app.showMainMenu();
    return 0;
}
