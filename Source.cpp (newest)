#include <iostream>
#include <string>
#include <map>
#include <iomanip>
#include <cctype> 
#include <conio.h>
#include <fstream>
#include <sstream>
#include <algorithm> 
using namespace std;

const int MAX_HOURS_PER_WEEK = 30;        // Maximum hours per expert per week
const int MAX_DAILY_HOURS = 6;            // Maximum working hours per day for an expert
const int SHOP_OPENING_HOUR = 8;          // Shop opens at 8 AM
const int SHOP_CLOSING_HOUR = 19;         // Shop closes at 7 PM (19:00)
const int DAYS_IN_MONTH = 30;             // Assuming 30 days per month for simplicity
const int WEEKS_IN_YEAR = 52;             // Number of weeks in a year

class Service {
public:
    string name;
    double price;
    int duration; 
    Service(string n = "", double p = 0.0, int d = 0) : name(n), price(p), duration(d) {}
};

class Expert {
public:
    string name;
    int maxHoursPerWeek;
    int hoursWorked;
    int weeklyHours[WEEKS_IN_YEAR];  
    map<int, map<int, bool>> timeSlots[12];  // Track booked times per month, day, and hour

    Expert(string n = "") : name(n), maxHoursPerWeek(MAX_HOURS_PER_WEEK), hoursWorked(0) {
        for (int month = 0; month < 12; ++month) {
            for (int day = 1; day <= DAYS_IN_MONTH; ++day) {  
                for (int hour = SHOP_OPENING_HOUR; hour < SHOP_CLOSING_HOUR; ++hour) {  
                    timeSlots[month][day][hour] = false;
                }
            }
        }
        for (int week = 0; week < WEEKS_IN_YEAR; ++week) {
            weeklyHours[week] = 0;
        }
    }

    bool isAvailable(int month, int day, int startHour, int duration, int week) {
        for (int i = 0; i < duration; ++i) {
            if (startHour + i >= SHOP_CLOSING_HOUR || timeSlots[month - 1][day][startHour + i]) {
                return false;
            }
        }
        // Check daily limit
        int dailyHours = 0;
        for (int hour = SHOP_OPENING_HOUR; hour < SHOP_CLOSING_HOUR; ++hour) {
            if (timeSlots[month - 1][day][hour]) {
                dailyHours++;
            }
        }
        if (dailyHours + duration > MAX_DAILY_HOURS) {  
            return false;
        }

        // Check weekly limit
        if (weeklyHours[week] + duration > MAX_HOURS_PER_WEEK) {  
            return false;
        }

        return true;
    }

    void bookTime(int month, int day, int startHour, int duration, int week) {
        for (int i = 0; i < duration; ++i) {
            timeSlots[month - 1][day][startHour + i] = true;
        }
        hoursWorked += duration;
        weeklyHours[week] += duration;
    }

    int getWeekOfYear(int month, int day) {
        return ((month - 1) * DAYS_IN_MONTH + day) / 7;  
    }

    static bool caseInsensitiveEqual(const string& str1, const string& str2) {
        if (str1.size() != str2.size()) return false;
        for (size_t i = 0; i < str1.size(); ++i) {
            if (tolower(str1[i]) != tolower(str2[i])) return false;
        }
        return true;
    }

    void loadBookingsFromFile() {
        ifstream file("bookings.txt");
        if (!file.is_open()) {
            cout << "Error: Could not open bookings file." << endl;
            return;
        }

        string line, customerName, serviceName, expertName;
        int month, day, startHour;

        // Read each booking from the file
        while (getline(file, line)) {
            stringstream ss(line);
            getline(ss, customerName, ',');
            getline(ss, serviceName, ',');
            getline(ss, expertName, ',');
            ss >> month;
            ss.ignore();  
            ss >> day;
            ss.ignore(); 
            ss >> startHour;

            // If the booking belongs to this expert
            if (caseInsensitiveEqual(expertName, name)) {
                // Calculate the week of the year for the booking
                int week = getWeekOfYear(month, day);

                // Assuming the duration of the service is 2 hours (or read it dynamically if needed)
                // Update the time slots and weekly hours for the expert
                for (int i = 0; i < 2; ++i) {  // Adjust duration if needed
                    timeSlots[month - 1][day][startHour + i] = true;  // Mark the time slot as booked
                }
                weeklyHours[week] += 2;  // Update the weekly hours (adjust if service duration varies)
                hoursWorked += 2;        // Update total hours worked by the expert
            }
        }

        file.close();
    }
};

class Customer {
public:
    string name;
    struct Booking {
        string serviceName;
        int month;
        int day;
        string expertName;
    };
    Booking bookedServices[100];
    int bookingCount;

    Customer(string n = "") : name(n), bookingCount(0) {}
};

class BeautyServiceApp {
private:
    Service services[4];
    Expert experts[3];   
    int serviceCount;
    int expertCount;

    // For admin login and registration
    map<string, string> adminCredentials; // Stores admin credentials
    bool isAdminLoggedIn = false; 

    // Load admin credentials from a file
    void loadAdminCredentials() {
        ifstream file("AdminCredentials.txt");
        if (file.is_open()) {
            string username, password;
            while (getline(file, username) && getline(file, password)) {
                adminCredentials[username] = password;
            }
            file.close();
        }
    }

    // Save admin credentials to a file
    void saveAdminCredentials() {
        ofstream file("AdminCredentials.txt");
        if (file.is_open()) {
            map<string, string>::iterator it;
            for (it = adminCredentials.begin(); it != adminCredentials.end(); ++it) {
                file << it->first << endl << it->second << endl;
            }
            file.close();
        }
    }

    // Simplified case-insensitive comparison function
    static bool caseInsensitiveEqual(const string& str1, const string& str2) {
        if (str1.size() != str2.size()) return false;
        for (size_t i = 0; i < str1.size(); ++i) {
            if (tolower(str1[i]) != tolower(str2[i])) return false;
        }
        return true;
    }

    static string formatServiceName(const string& serviceName) {
        if (serviceName.empty()) return serviceName;
        string formattedName = serviceName;
        formattedName[0] = toupper(formattedName[0]);
        return formattedName;
    }

    // Function to check if a string is a valid integer
    bool isInteger(const string& input) {
        // If the input contains any non-digit characters, it's invalid
        if (input.empty()) return false;
        for (char c : input) {
            if (!isdigit(c)) return false;
        }
        return true;
    }

    // Function to get the booking counts for each customer from bookings.txt
    map<string, int> getBookingCounts(const string& bookingsFilename) {
        ifstream bookingFile(bookingsFilename); // Open the bookings file
        map<string, int> customerBookingCount;  // Map to store booking count per customer

        if (!bookingFile.is_open()) {
            cout << "Error: Could not open bookings file." << endl;
            return customerBookingCount;
        }

        string line, customerName;
        while (getline(bookingFile, line)) {
            stringstream ss(line);
            getline(ss, customerName, ','); // Extract customer name from the first column
            customerBookingCount[customerName]++; // Increment booking count for this customer
        }

        bookingFile.close(); // Close the file
        return customerBookingCount;
    }

public:
    BeautyServiceApp() : serviceCount(0), expertCount(0) {
        services[serviceCount++] = Service("Facial", 50.0, 2);
        services[serviceCount++] = Service("Makeup", 70.0, 2);
        services[serviceCount++] = Service("Manicure", 30.0, 2);
        services[serviceCount++] = Service("Consultation", 20.0, 1);

        experts[expertCount++] = Expert("Alice");
        experts[expertCount++] = Expert("Bob");
        experts[expertCount++] = Expert("Cathy");

        // Adding a default admin (for initial testing)
        adminCredentials["admin"] = "";
        loadAdminCredentials();
    }

    // Helper function to find service by name
    Service* findServiceByName(const string& serviceName) {
        for (int i = 0; i < serviceCount; ++i) {
            if (caseInsensitiveEqual(services[i].name, serviceName)) {
                return &services[i];
            }
        }
        return nullptr; // Service not found
    }

    // Helper function to find expert by name
    Expert* findExpertByName(const string& expertName) {
        for (int i = 0; i < expertCount; ++i) {
            if (caseInsensitiveEqual(experts[i].name, expertName)) {
                return &experts[i];
            }
        }
        return nullptr; // Expert not found
    }

    void showLogo() {
        cout << "\033[1;36m"; 
        cout << "   ____ _                                    _   _                       " << endl;
        cout << "  / ___| | __ _ _ __ ___   ___  _   _ _ __  | | | | __ ___   _____ _ __  " << endl;
        cout << " | |  _| |/ _` | '_ ` _ \\ / _ \\| | | | '__| | |_| |/ _` \\ \\ / / _ \\ '_ \\ " << endl;
        cout << " | |_| | | (_| | | | | | | (_) | |_| | |    |  _  | (_| |\\ V /  __/ | | |" << endl;
        cout << "  \\____|_|\\__,_|_| |_| |_|\\___/ \\__,_|_|    |_| |_|\\__,_| \\_/ \\___|_| |_|" << endl;
        cout << "\033[0m"; 
    }

    void Loginlogo() {
        cout << "\033[1;36m";
        cout << "  _      ____   _____ _____ _   _ " << endl;
        cout << " | |    / __ \\ / ____|_   _| \\ | |" << endl;
        cout << " | |   | |  | | |  __  | | |  \\| |" << endl;
        cout << " | |   | |  | | | |_ | | | | . ` |" << endl;
        cout << " | |___| |__| | |__| |_| |_| |\\  |" << endl;
        cout << " |______\\____/ \\_____|_____|_| \\_|" << endl;
        cout << "\033[0m"; 
    }

    void Registerlogo() {
        cout << "\033[1;36m";
        cout << "  _____  ______ _____ _____  _____ _______ ______ _____  " << endl;
        cout << " |  __ \\|  ____/ ____|_   _|/ ____|__   __|  ____|  __ \\ " << endl;
        cout << " | |__) | |__ | |  __  | | | (___    | |  | |__  | |__) |" << endl;
        cout << " |  _  /|  __|| | |_ | | |  \\___ \\   | |  |  __| |  _  / " << endl;
        cout << " | | \\ \\| |___| |__| |_| |_ ____) |  | |  | |____| | \\ \\ " << endl;
        cout << " |_|  \\_\\______\\_____|_____|_____/   |_|  |______|_|  \\_\\ " << endl;
        cout << "\033[0m"; 
    }

    void showExitLogo() {
        cout << "\033[1;36m"; 
        cout << "   ___   __  __    ___    _____  \n";
        cout << "  | __|  \\ \\/ /   |_ _|  |_   _| \n";
        cout << "  | _|    >  <     | |     | |   \n";
        cout << "  |___|  /_/\\_\\   |___|   _|_|_  \n";
        cout << "_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"| \n";
        cout << " `-0-0-' `-0-0-' `-0-0-' `-0-0-' \n";
        cout << "\033[0m"; 
        cout << "Thank you for using Glamour Haven!" << endl;
    }

    void showMainMenu() {
        showLogo();
        int choice;
        do {
            cout << "+------------------+" << endl;
            cout << "|     Main Menu    |" << endl;
            cout << "+------------------+" << endl;
            cout << "| 1. Customer Menu |" << endl;
            cout << "| 2. Admin Menu    |" << endl;
            cout << "| 3. Exit          |" << endl;
            cout << "+------------------+" << endl;
            cout << "Enter your choice: ";
            while (!(cin >> choice) || choice < 1 || choice > 3) {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "\nInvalid choice. Please enter a number between 1 and 3: ";
            }

            switch (choice) {
            case 1: customerMenu(); break;
            case 2: adminMenu(); break;
            case 3: cout << "Exiting..." << endl;
                showExitLogo();
                break;
            }
        } while (choice != 3);
    }

    void customerMenu() {
        showLogo();
        int choice;
        do {
            cout << "+----------------------------------+" << endl;
            cout << "|          Customer Menu           |" << endl;
            cout << "+----------------------------------+" << endl;
            cout << "| 1. View Organization Details     |" << endl;
            cout << "| 2. View Services and Experts     |" << endl;
            cout << "| 3. Check Schedule                |" << endl;
            cout << "| 4. Book Service                  |" << endl;
            cout << "| 5. View Booked Schedule          |" << endl;
            cout << "| 6. Customer Review               |" << endl;
            cout << "| 7. Back to Main Menu             |" << endl;
            cout << "+----------------------------------+" << endl;
            cout << "Enter your choice: ";

            while (!(cin >> choice) || choice < 1 || choice > 7) {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "\nInvalid choice. Please enter a number between 1 and 7: ";
            }

            switch (choice) {
            case 1: viewOrganizationDetails(); break;
            case 2: viewServicesAndExperts(); break;
            case 3: checkSchedule(); break;
            case 4: bookService(); break;
            case 5: viewBookedSchedule(); break;
            case 6: customerReview(); break;  
            case 7: break; 
            }
        } while (choice != 7);
    }

    void adminMenu() {
    while (true) {
        if (!isAdminLoggedIn) {
            int choice;
            cout << "+----------------------------------+" << endl;
            cout << "|            Admin Menu            |" << endl;
            cout << "+----------------------------------+" << endl;
            cout << "| 1. Register Admin                |" << endl;
            cout << "| 2. Login Admin                   |" << endl;
            cout << "| 3. Back to Main Menu             |" << endl;
            cout << "+----------------------------------+" << endl;
            cout << "Enter your choice: ";

            while (!(cin >> choice) || choice < 1 || choice > 3) {
                cin.clear();
                cin.ignore(numeric_limits<streamsize>::max(), '\n');
                cout << "\nInvalid choice. Please enter a number between 1 and 3: ";
            }

            switch (choice) {
            case 1: registerAdmin(); break;
            case 2:
                loginAdmin();
                if (isAdminLoggedIn) {
                    showAdminManagementOptions();
                    return; 
                }
                break;
            case 3: return; 
            }
        } else {
            showAdminManagementOptions();
            return; 
        }
    }
}

    void showAdminManagementOptions() {
    int choice;
    do {
        cout << "+----------------------------------+" << endl;
        cout << "|       Admin Management Menu      |" << endl;
        cout << "+----------------------------------+" << endl;
        cout << "| 1. View Individual Schedule      |" << endl;
        cout << "| 2. View Overall Schedule         |" << endl;
        cout << "| 3. View Customers                |" << endl;
        cout << "| 4. View Customers Feedback       |" << endl; 
        cout << "| 5. Generate Sales Report         |" << endl;
        cout << "| 6. Logout                        |" << endl; 
        cout << "+----------------------------------+" << endl;
        cout << "Enter your choice: ";

        while (!(cin >> choice) || choice < 1 || choice > 6) { 
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "\nInvalid choice. Please enter a number between 1 and 6: ";
        }

        switch (choice) {
        case 1: {
            string expertName;
            cout << "Enter the expert's name: ";
            cin >> expertName;
            viewIndividualSchedule(expertName);
            break;
        }
        case 2: viewOverallSchedule(); break;
        case 3: viewCustomers(); break;
        case 4: displayReviews(); break;  
        case 5: generateSalesReport(); break;
        case 6: isAdminLoggedIn = false; cout << "Logged out successfully." << endl; break;
        }
    } while (choice != 6); 
}

    void registerAdmin() {
        string username, password;
        Registerlogo();
        cout << "\nEnter a new username: ";
        cin >> username;
        cout << "Enter a new password: ";
        cin >> password;

        if (adminCredentials.find(username) != adminCredentials.end()) {
            cout << "Username already exists. Please try again." << endl;
        }
        else {
            adminCredentials[username] = password;
            saveAdminCredentials(); // Save new credentials to file
            cout << "Registration successful. You can now log in." << endl;
    }
}

    void loginAdmin() {
        string username, password;
        Loginlogo();
        cout << "\nEnter username: ";
        cin >> username;
        password = getPassword(); // This function handles password input

        if (adminCredentials.find(username) != adminCredentials.end() &&
            adminCredentials[username] == password) {
            isAdminLoggedIn = true;
            cout << "Login successful. Welcome, " << username << "!" << endl;
        }
        else {
            cout << "Invalid username or password. Please try again." << endl;
        }
    }

    string getPassword() {
        string password;
        char ch;
        cout << "Enter password: ";
        while ((ch = _getch()) != '\r') {  // '\r' is the Enter key
            if (ch == '\b') {  // Backspace
                if (!password.empty()) {
                    cout << "\b \b";  // Erase the last asterisk
                    password.pop_back();
                }
            }
            else {
                password.push_back(ch);
                cout << '*';
            }
        }
        cout << endl;
        return password;
    }

    void viewOrganizationDetails() {
        cout << "\033[1;36m"; 
        cout << "\n+==================================================+\n";
        cout << "|            Welcome to \033[1;36mGlamour Haven!\033[1;36m             |\n"; 
        cout << "+==================================================+\n\033[0m"; 

        // About Us section 
        cout << "\033[1;36m+==================== About Us ====================+\033[0m\n";
        cout << "\033[1;37m Glamour Haven, founded in \033[1;33m2010\033[1;37m, focuses on\n"; 
        cout << " delivering cutting-edge skincare and beauty\n";
        cout << " solutions. Our mission is to prioritize \033[1;33mquality\033[1;37m,\n";
        cout << " safety, and efficacy in all our services.\n";
        cout << "\033[1;36m+==================================================+\033[0m\n\n"; 

        // Our Services section
        cout << "\033[1;36m+================== Our Services ==================+\033[0m\n";
        cout << left << setw(20) << "\033[1;37mFacials\033[0m" << ": Rejuvenate your skin with our custom facials.\n"; 
        cout << left << setw(20) << "\033[1;37mMakeup Application\033[0m" << ": Perfect your look for any occasion with our expert makeup artists.\n";
        cout << left << setw(20) << "\033[1;37mManicure\033[0m" << ": Improves the overall look of your nails and hands.\n";
        cout << left << setw(20) << "\033[1;37mConsultation\033[0m" << ": Get personalized beauty advice and recommendations.\n";
        cout << "\033[1;36m+==================================================+\033[0m\n\n"; 

        // Our Location section
        cout << "\033[1;36m+================== Our Location ==================+\033[0m\n";
        cout << "\033[1;37m Address        : 123 Haven St.\n";
        cout << " Open Hours     : 8:00 AM - 7:00 PM\033[0m\n";
        cout << "\033[1;36m+==================================================+\033[0m\n\n";

        // Online Presence section
        cout << "\033[1;36m+=============== Online Presence ==================+\033[0m\n"; 
        cout << "\033[1;37m Google          : www.GlamourHaven.com\n";
        cout << " Instagram       : @Glamour_Haven\n";
        cout << " Facebook        : /Glamour_Haven\033[0m\n";
        cout << "\033[1;36m+==================================================+\033[0m\n\n";

        // Customer Support section
        cout << "\033[1;36m+=============== Customer Support =================+\033[0m\n"; 
        cout << "\033[1;37m Contact          : 011-236-2111\n";
        cout << " Email            : GlamourHaven@gmail.com\033[0m\n";
        cout << "\033[1;36m+==================================================+\033[0m\n\n"; 
    }

    void viewServicesAndExperts() {
        cout << endl;
        cout << "\033[1;36m" << string(80, '=') << "\033[0m" << endl; 
        cout << "\033[1;33m" << left << setw(25) << "Service Name"
            << setw(10) << "Price"
            << setw(15) << "Duration(hrs)"
            << setw(30) << "Available Experts" << "\033[0m" << endl;
        cout << "\033[1;36m" << string(80, '=') << "\033[0m" << endl; 

        // Display services and prices 
        for (int i = 0; i < serviceCount; ++i) {
            cout << left << setw(25) << services[i].name;
            cout << setw(10) << fixed << setprecision(2) << services[i].price; 
            cout << setw(15) << services[i].duration; 

            // Display available experts
            bool first = true;
            for (int j = 0; j < expertCount; ++j) {
                if (first) {
                    cout << experts[j].name;
                    first = false;
                }
                else {
                    cout << ", " << experts[j].name;
                }
            }
            cout << endl;
        }
        cout << "\033[1;36m" << string(80, '=') << "\033[0m" << endl; 
        cout << endl;
    }

    struct BookingEntry {
        int month;
        int day;
        int startHour;
        int endHour;
        string serviceName;
    };

    // Sorting function for BookingEntry array by month and day
    void sortBookings(BookingEntry bookings[], int bookingCount) {
        for (int i = 0; i < bookingCount - 1; ++i) {
            for (int j = 0; j < bookingCount - i - 1; ++j) {
                // Sort first by month, and if the month is the same, sort by day
                if (bookings[j].month > bookings[j + 1].month ||
                    (bookings[j].month == bookings[j + 1].month && bookings[j].day > bookings[j + 1].day)) {
                    // Swap the two entries
                    BookingEntry temp = bookings[j];
                    bookings[j] = bookings[j + 1];
                    bookings[j + 1] = temp;
                }
            }
        }
    }

    void checkSchedule() {
        string expertName;
        cout << "Enter the expert's name: ";
        cin >> expertName;

        Expert* expert = nullptr;
        for (int i = 0; i < expertCount; ++i) {
            if (caseInsensitiveEqual(experts[i].name, expertName)) {
                expert = &experts[i];
                break;
            }
        }

        if (expert) {
            cout << "\033[1;36m" << string(70, '=') << "\033[0m" << endl;
            cout << "\033[1;33mSchedule for " << expert->name << ":\033[0m" << endl;
            cout << "\033[1;36m" << string(70, '=') << "\033[0m" << endl;

            cout << "\033[1;33m" << left << setw(15) << "Month"
                << setw(10) << "Day"
                << setw(15) << "Time Slot"
                << setw(30) << "Booked Service" << "\033[0m" << endl;
            cout << "\033[1;36m" << string(70, '=') << "\033[0m" << endl;

            BookingEntry bookings[100]; // Array to store up to 100 bookings
            int bookingCount = 0;       // Track the number of bookings

            ifstream bookingFile("bookings.txt");
            if (!bookingFile.is_open()) {
                cout << "Error opening bookings file for reading." << endl;
                return;
            }

            string line;
            while (getline(bookingFile, line)) {
                stringstream ss(line);
                string customerName, serviceName, eName;
                int month, day, startHour;

                // Parse the line from the file
                getline(ss, customerName, ',');
                getline(ss, serviceName, ',');
                getline(ss, eName, ',');
                ss >> month;
                ss.ignore();
                ss >> day;
                ss.ignore();
                ss >> startHour;

                // Ensure the booking is for the correct expert
                if (caseInsensitiveEqual(eName, expert->name)) {
                    // Find the duration of the service
                    int serviceDuration = 0;
                    for (int i = 0; i < serviceCount; ++i) {
                        if (caseInsensitiveEqual(services[i].name, serviceName)) {
                            serviceDuration = services[i].duration;
                            break;
                        }
                    }

                    // Store the booking entry in the array
                    bookings[bookingCount].month = month;
                    bookings[bookingCount].day = day;
                    bookings[bookingCount].startHour = startHour;
                    bookings[bookingCount].endHour = startHour + serviceDuration;
                    bookings[bookingCount].serviceName = serviceName;
                    bookingCount++;
                }
            }

            bookingFile.close();

            // Sort the bookings by month and day
            sortBookings(bookings, bookingCount);

            // Display the sorted bookings
            for (int i = 0; i < bookingCount; ++i) {
                cout << left << setw(15) << bookings[i].month;
                cout << setw(10) << bookings[i].day;
                cout << left << setw(15) << (to_string(bookings[i].startHour) + "-" + to_string(bookings[i].endHour));
                cout << setw(30) << formatServiceName(bookings[i].serviceName) << endl;
            }

            cout << "\033[1;36m" << string(70, '=') << "\033[0m" << endl;
        }
        else {
            cout << "\033[1;31mExpert not found!\033[0m" << endl;
        }
    }

    void bookService() {
        string customerName, serviceName, expertName;
        int month, day, startHour;

        // Display available services and experts
        viewServicesAndExperts();

        // Get customer details
        cout << "\n\033[1;36m" << string(40, '=') << "\033[0m\n"; 
        cout << "\033[1;33m  Enter Customer Details\033[0m\n";    
        cout << "\033[1;36m" << string(40, '=') << "\033[0m\n\n";  

        cout << "Enter your name: ";
        cin.ignore();
        getline(cin, customerName);

        cout << "Enter the service name: ";
        getline(cin, serviceName);

        // Find the selected service
        Service* selectedService = findServiceByName(serviceName);
        if (!selectedService) {
            cout << "\033[1;31mService not found. Please try again.\033[0m" << endl; 
            return;
        }

        // Get expert details
        cout << "Enter the expert's name: ";
        getline(cin, expertName);

        Expert* selectedExpert = findExpertByName(expertName);
        if (!selectedExpert) {
            cout << "\033[1;31mExpert not found. Please try again.\033[0m" << endl; 
            return;
        }

        // Load existing bookings for the expert to enforce constraints
        selectedExpert->loadBookingsFromFile();

        // Get booking details
        cout << "\n\033[1;36m" << string(40, '=') << "\033[0m\n"; 
        cout << "\033[1;33m  Enter Booking Details\033[0m\n";    
        cout << "\033[1;36m" << string(40, '=') << "\033[0m\n\n";  

        cout << "Enter the month (1-12): ";
        cin >> month;
        cout << "Enter the day (1-30): ";
        cin >> day;
        cout << "Enter the start hour (8-18): ";
        cin >> startHour;

        // Check if the booking fits within the shop hours
        if (startHour < 8 || startHour + selectedService->duration > 18) {
            cout << "\033[1;31mInvalid booking time. Please select a time within 8 AM - 7 PM.\033[0m" << endl;
            return;
        }

        // Check if the expert is available
        int week = selectedExpert->getWeekOfYear(month, day);
        if (!selectedExpert->isAvailable(month, day, startHour, selectedService->duration, week)) {
            cout << "\033[1;31mThe expert is not available at the selected time. Please choose a different time.\033[0m" << endl;
            return;
        }

        // Book the time slot
        selectedExpert->bookTime(month, day, startHour, selectedService->duration, week);

        // Save the booking to a file
        ofstream bookingFile("bookings.txt", ios::app);
        if (bookingFile.is_open()) {
            bookingFile << customerName << "," << serviceName << "," << expertName << "," << month << "," << day << "," << startHour << "\n";
            bookingFile.close();

            // Booking confirmation message
            cout << "\n\033[1;32m" << string(40, '=') << "\033[0m\n";
            cout << "\033[1;32m  Service booked successfully!\033[0m\n";
            cout << "\033[1;32m" << string(40, '=') << "\033[0m\n"; 
        }
        else {
            cout << "\033[1;31mError saving booking. Please try again later.\033[0m" << endl; 
        }
    }

    void viewBookedSchedule() {
        string customerName;
        cout << "Enter your name: ";
        cin.ignore(); 
        getline(cin, customerName); 

        // Open the bookings file
        ifstream bookingFile("bookings.txt");
        if (!bookingFile.is_open()) {
            cout << "Error opening bookings file for reading." << endl;
            return;
        }

        bool found = false;

        cout << "\033[1;36m" << string(80, '=') << "\033[0m" << endl; 
        cout << "\033[1;33mBooked Services for " << customerName << ":\033[0m" << endl; 
        cout << "\033[1;36m" << string(80, '=') << "\033[0m" << endl; 

        cout << "\033[1;33m" << left << setw(20) << "Service Name"
            << setw(10) << "Day"
            << setw(10) << "Month"
            << setw(15) << "Time Slot"
            << setw(20) << "Expert Name" << "\033[0m" << endl;
        cout << "\033[1;36m" << string(80, '=') << "\033[0m" << endl;

        string line;
        while (getline(bookingFile, line)) {
            stringstream ss(line);
            string name, serviceName, expertName;
            int month, day, startHour;

            // Reading customer name, service name, and expert name
            getline(ss, name, ','); 
            getline(ss, serviceName, ',');
            getline(ss, expertName, ',');
            ss >> month;
            ss.ignore(); 
            ss >> day;
            ss.ignore(); 
            ss >> startHour;

            // Apply caseInsensitiveEqual for full name comparison
            if (caseInsensitiveEqual(name, customerName)) {
                found = true;

                // Find the duration of the service by matching the service name
                int serviceDuration = 0;
                for (int i = 0; i < serviceCount; ++i) {
                    if (caseInsensitiveEqual(services[i].name, serviceName)) {
                        serviceDuration = services[i].duration;
                        break;
                    }
                }

                // Calculate the end hour
                int endHour = startHour + serviceDuration;

                // Display the service booking with correct formatting
                cout << left << setw(20) << formatServiceName(serviceName);
                cout << setw(10) << day;
                cout << setw(10) << month;
                cout << left << setw(15) << (to_string(startHour) + "-" + to_string(endHour));
                cout << setw(20) << expertName << endl;
            }
        }

        if (!found) {
            cout << "No bookings found for " << customerName << "." << endl;
        }

        cout << "\033[1;36m" << string(80, '=') << "\033[0m" << endl;
        bookingFile.close();
    }

    void customerReview() {
        string customerName;
        string serviceName;
        string expertName;
        string ratingInput; 
        int rating;
        string comment;

        cout << "\033[1;36m" << string(65, '=') << "\033[0m" << endl; 
        cout << "\033[1;33m|                Customer Feedback Submission                  |\033[0m" << endl;  
        cout << "\033[1;36m" << string(65, '=') << "\033[0m" << endl; 

        cout << "Enter your name: ";
        cin.ignore(); 
        getline(cin, customerName);

        cout << "Enter the service name you want to review: ";
        getline(cin, serviceName);

        cout << "Enter the expert's name: ";
        getline(cin, expertName);

        // Input and validate rating (must be an integer between 1 and 5)
        while (true) {
            cout << "Enter your rating (1-5): ";
            cin >> ratingInput;

            // Check if the input is a valid integer
            if (isInteger(ratingInput)) {
                // Convert the valid string input to an integer
                rating = stoi(ratingInput);

                // Ensure that the rating is between 1 and 5
                if (rating >= 1 && rating <= 5) {
                    break;  // Valid rating, exit the loop
                }
            }

            // If we reach here, the input was invalid
            cout << "Invalid rating. Please enter a whole number between 1 and 5." << endl;
            cin.clear();  
            cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Discard invalid input
        }

        cout << "Enter your comment: ";
        cin.ignore(); 
        getline(cin, comment);

        // Save the review to a file
        ofstream file("reviews.txt", ios::app); // Open the file in append mode
        if (file.is_open()) {
            file << customerName << "|" << serviceName << "|" << expertName << "|" << rating << "|" << comment << "\n";
            file.close();

            cout << "\033[1;36m" << string(65, '=') << "\033[0m" << endl; 
            cout << "\033[1;32m|                    Thank you for your feedback!               |\033[0m" << endl;  
            cout << "\033[1;36m" << string(65, '=') << "\033[0m" << endl; 
        }
        else {
            cout << "\033[1;36m" << string(65, '=') << "\033[0m" << endl; 
            cout << "\033[1;31m| Error: Unable to open file for writing.                      |\033[0m" << endl;
            cout << "\033[1;36m" << string(65, '=') << "\033[0m" << endl; 
        }
    }

    void viewIndividualSchedule(const string& expertName) {
        Expert* expert = nullptr;

        // Find the expert by name
        for (int i = 0; i < expertCount; ++i) {
            if (caseInsensitiveEqual(experts[i].name, expertName)) {
                expert = &experts[i];
                break;
            }
        }

        if (expert) {
            cout << "\033[1;36m" << string(100, '=') << "\033[0m" << endl; 
            cout << "\033[1;33mSchedule for " << expert->name << ":\033[0m" << endl; 
            cout << "\033[1;36m" << string(100, '=') << "\033[0m" << endl; 

            cout << left << setw(20) << "Customer"
                << setw(20) << "Booked Service"
                << setw(10) << "Month"
                << setw(10) << "Day"
                << setw(20) << "Time Slot" << endl;

            cout << "\033[1;36m" << string(100, '=') << "\033[0m" << endl; 

            // Open the bookings file
            ifstream bookingFile("bookings.txt");
            if (!bookingFile.is_open()) {
                cout << "Error opening bookings file for reading." << endl;
                return;
            }

            string line;
            while (getline(bookingFile, line)) {
                stringstream ss(line);
                string customerName, serviceName, bookedExpert;
                int month, day, startHour;

                // Read customer, service, expert, month, day, and startHour from the file
                getline(ss, customerName, ',');
                getline(ss, serviceName, ',');
                getline(ss, bookedExpert, ',');
                ss >> month;
                ss.ignore(); 
                ss >> day;
                ss.ignore();
                ss >> startHour;

                // Check if this booking is for the specified expert
                if (caseInsensitiveEqual(bookedExpert, expertName)) {
                    // Calculate the end hour by adding the duration of the service
                    int serviceDuration = 0;
                    for (int i = 0; i < serviceCount; ++i) {
                        if (caseInsensitiveEqual(services[i].name, serviceName)) {
                            serviceDuration = services[i].duration;
                            break;
                        }
                    }

                    // Calculate the end time for the service
                    int endHour = startHour + serviceDuration;

                    // Display the booking with proper formatting
                    cout << left << setw(20) << customerName;
                    cout << setw(20) << formatServiceName(serviceName);
                    cout << setw(10) << month;
                    cout << setw(10) << day;
                    cout << setw(20) << (to_string(startHour) + "-" + to_string(endHour));
                    cout << endl;
                }
            }

            bookingFile.close();
            cout << "\033[1;36m" << string(100, '=') << "\033[0m" << endl; 
        }
        else {
            cout << "Expert not found!" << endl;
        }
    }

    void viewOverallSchedule() {
        cout << "\033[1;36m" << string(120, '=') << "\033[0m" << endl;
        cout << "\033[1;33mOverall Schedule:\033[0m" << endl; 
        cout << "\033[1;36m" << string(120, '=') << "\033[0m" << endl; 

        cout << left << setw(15) << "Expert"
            << setw(15) << "Month"
            << setw(10) << "Day"
            << setw(20) << "Time Slot"
            << setw(20) << "Booked Service"
            << setw(20) << "Customer" << endl;

        cout << "\033[1;36m" << string(120, '=') << "\033[0m" << endl; 

        // Open the bookings file to gather details
        ifstream bookingFile("bookings.txt");
        if (!bookingFile.is_open()) {
            cout << "Error opening bookings file for reading." << endl;
            return;
        }

        string line;
        while (getline(bookingFile, line)) {
            stringstream ss(line);
            string customerName, serviceName, expertName;
            int month = 0, day = 0, startHour = 0;

            // Read the booking details from the file
            getline(ss, customerName, ',');
            getline(ss, serviceName, ',');
            getline(ss, expertName, ',');
            ss >> month;
            ss.ignore(); 
            ss >> day;
            ss.ignore(); 
            ss >> startHour;

            // Ensure valid data has been read before continuing
            if (ss.fail() || month < 1 || month > 12 || day < 1 || day > 31 || startHour < 8 || startHour >= 19) {
                cout << "Error: Invalid data in booking file. Skipping entry." << endl;
                continue;
            }

            // Find the service duration from the services array
            int serviceDuration = 0;
            for (int i = 0; i < serviceCount; ++i) {
                if (caseInsensitiveEqual(services[i].name, serviceName)) {
                    serviceDuration = services[i].duration;
                    break;
                }
            }

            // Calculate the end hour
            int endHour = startHour + serviceDuration;

            // Print the details for each booking
            cout << left << setw(15) << expertName;
            cout << setw(15) << month;
            cout << setw(10) << day;
            cout << left << setw(20) << (to_string(startHour) + "-" + to_string(endHour));
            cout << setw(20) << formatServiceName(serviceName);
            cout << setw(20) << customerName << endl;
        }

        bookingFile.close();
        cout << "\033[1;36m" << string(120, '=') << "\033[0m" << endl; 
    }

    void viewCustomers() {
        ifstream bookingFile("bookings.txt");
        if (!bookingFile.is_open()) {
            cout << "Error: Could not open bookings.txt file." << endl;
            return;
        }

        map<string, int> customerBookingCount;
        string line;

        while (getline(bookingFile, line)) {
            stringstream ss(line);
            string customerName, serviceName, expertName;
            int month, day, startHour;

            getline(ss, customerName, ',');
            getline(ss, serviceName, ',');
            getline(ss, expertName, ',');
            ss >> month >> day >> startHour;

            customerBookingCount[customerName]++;
        }

        bookingFile.close();

        int borderLength = 68;

        cout << "\033[1;36m" << string(borderLength, '=') << "\033[0m" << endl;
        cout << "\033[1;33m| List of Customers (Sorted Alphabetically with Booking Count) |\033[0m" << endl;
        cout << "\033[1;36m" << string(borderLength, '=') << "\033[0m" << endl;

        cout << left << setw(25) << "Customer Name" << setw(10) << "Bookings" << endl;
        cout << "\033[1;36m" << string(borderLength, '=') << "\033[0m" << endl;

        for (map<string, int>::const_iterator it = customerBookingCount.begin(); it != customerBookingCount.end(); ++it) {
            cout << left << setw(25) << it->first << setw(10) << it->second << endl;
        }

        cout << "\033[1;36m" << string(borderLength, '=') << "\033[0m" << endl;
    }

    void displayReviews() const {
        ifstream file("reviews.txt");
        if (!file.is_open()) {
            cout << "No reviews available or unable to open the file.\n";
            return;
        }

        string line;

        cout << "\033[1;36m" << string(75, '=') << "\033[0m" << endl; 
        cout << "\033[1;33m|                             Customer Reviews                             |\033[0m" << endl; 
        cout << "\033[1;36m" << string(75, '=') << "\033[0m" << endl; 

        cout << left << setw(18) << "Customer Name"
            << setw(18) << "Service Name"
            << setw(18) << "Expert Name"
            << setw(8) << "Rating"
            << "Comment" << endl;

        cout << "\033[1;36m" << string(75, '=') << "\033[0m" << endl; 

        while (getline(file, line)) {
            stringstream ss(line);
            string customerName, serviceName, expertName, ratingStr, comment;

            getline(ss, customerName, '|');
            getline(ss, serviceName, '|');
            getline(ss, expertName, '|');
            getline(ss, ratingStr, '|');
            getline(ss, comment, '|');

            // Print the first line of the review
            cout << left << setw(18) << customerName
                << setw(18) << serviceName
                << setw(18) << expertName
                << setw(8) << (ratingStr + "/5");

            // Set max width for comment display
            int maxWidth = 50;
            if (comment.length() > maxWidth) {
                // Print the first portion of the comment
                cout << comment.substr(0, maxWidth) << endl;

                // Print the rest of the comment in aligned format
                size_t pos = maxWidth;
                while (pos < comment.length()) {
                    cout << setw(62) << " " // Align with the comment column
                        << comment.substr(pos, maxWidth) << endl;
                    pos += maxWidth;
                }
            }
            else {
                cout << comment << endl; // If the comment is short enough
            }
        }

        cout << "\033[1;36m" << string(75, '=') << "\033[0m" << endl; 
        file.close();
    }

    void generateSalesReport() {
        // Display sales report menu
        int choice;
        cout << "\033[1;36m" << string(50, '=') << "\033[0m" << endl;
        cout << "\033[1;33m|            Sales Report Menu               |\033[0m" << endl;
        cout << "\033[1;36m" << string(50, '=') << "\033[0m" << endl;
        cout << "| 1. Monthly Sales Report                    |" << endl;
        cout << "| 2. Overall Sales Report                    |" << endl;
        cout << "\033[1;36m" << string(50, '=') << "\033[0m" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1: {
            int month;
            // Prompt user for the month
            cout << "\nEnter the month (1-12): ";
            cin >> month;

            // Validate the month input
            if (month < 1 || month > 12) {
                cout << "\033[1;31mInvalid month. Please enter a number between 1 and 12.\033[0m" << endl;
                return;
            }

            // Display monthly sales report header
            cout << "\033[1;36m" << string(50, '=') << "\033[0m" << endl;
            cout << "\033[1;33m|         Monthly Sales Report               |\033[0m" << endl;
            cout << "\033[1;36m" << string(50, '=') << "\033[0m" << endl;
            cout << "| Month: " << month << endl;
            cout << "\033[1;36m" << string(50, '=') << "\033[0m" << endl;

            // Prepare table for displaying service sales and bookings
            cout << left << setw(20) << "Service Name" << setw(15) << "Total Sales" << setw(15) << "Bookings" << endl;
            cout << "\033[1;36m" << string(50, '-') << "\033[0m" << endl;

            // Initialize arrays to store sales and booking count
            double* monthlySales = new double[serviceCount] { 0 };  // Array to hold sales per service
            int* serviceBookings = new int[serviceCount] { 0 };     // Array to hold booking counts per service
            double totalMonthlySales = 0.0;  // Total sales for the selected month
            bool hasBookings = false;

            // Open the bookings file
            ifstream bookingFile("bookings.txt");
            if (!bookingFile.is_open()) {
                cout << "\033[1;31mError opening bookings file.\033[0m" << endl;
                return;
            }

            // Read each line from the booking file
            string line;
            while (getline(bookingFile, line)) {
                stringstream ss(line);
                string customerName, serviceName, expertName;
                int bookingMonth = 0, bookingDay = 0, startHour = 0;

                // Parse booking details
                getline(ss, customerName, ',');
                getline(ss, serviceName, ',');
                getline(ss, expertName, ',');
                ss >> bookingMonth;
                ss.ignore();
                ss >> bookingDay;
                ss.ignore();
                ss >> startHour;

                // Skip bookings that do not match the selected month
                if (ss.fail() || bookingMonth != month) continue;

                // Accumulate sales and bookings for matching services
                for (int i = 0; i < serviceCount; ++i) {
                    if (caseInsensitiveEqual(services[i].name, serviceName)) {
                        monthlySales[i] += services[i].price;
                        serviceBookings[i]++;
                        totalMonthlySales += services[i].price;
                        hasBookings = true;
                        break;
                    }
                }
            }

            bookingFile.close();

            // Display the report if there are bookings
            if (!hasBookings) {
                cout << "No bookings found for the month " << month << "." << endl;
            }
            else {
                for (int i = 0; i < serviceCount; ++i) {
                    cout << left << setw(20) << services[i].name
                        << setw(15) << fixed << setprecision(2) << monthlySales[i]
                        << setw(15) << serviceBookings[i] << endl;
                }
                cout << "\033[1;36m" << string(50, '-') << "\033[0m" << endl;
                cout << left << setw(20) << "Total Monthly Sales"
                    << setw(15) << fixed << setprecision(2) << totalMonthlySales << endl;
                cout << "\033[1;36m" << string(50, '=') << "\033[0m" << endl;
            }

            // Clean up dynamic arrays
            delete[] monthlySales;
            delete[] serviceBookings;
            cout << endl;
            break;
        }
        case 2: {
            // Display overall sales report header
            cout << "\033[1;36m" << string(50, '=') << "\033[0m" << endl;
            cout << "\033[1;33m|         Overall Sales Report               |\033[0m" << endl;
            cout << "\033[1;36m" << string(50, '=') << "\033[0m" << endl;

            // Prepare table for displaying service sales and bookings
            cout << left << setw(20) << "Service Name" << setw(15) << "Total Sales" << setw(15) << "Bookings" << endl;
            cout << "\033[1;36m" << string(50, '-') << "\033[0m" << endl;

            // Initialize arrays to store overall sales and bookings
            double* overallSales = new double[serviceCount] { 0 };
            int* serviceBookings = new int[serviceCount] { 0 };
            double totalOverallSales = 0.0;

            // Open the bookings file
            ifstream bookingFile("bookings.txt");
            if (bookingFile.is_open()) {
                string line;

                // Read each line from the booking file
                while (getline(bookingFile, line)) {
                    stringstream ss(line);
                    string customerName, serviceName, expertName;
                    int bookingMonth, bookingDay, startHour;

                    // Parse booking details
                    getline(ss, customerName, ',');
                    getline(ss, serviceName, ',');
                    getline(ss, expertName, ',');
                    ss >> bookingMonth;
                    ss.ignore();

                    // Accumulate sales and bookings for matching services
                    for (int i = 0; i < serviceCount; ++i) {
                        if (caseInsensitiveEqual(services[i].name, serviceName)) {
                            overallSales[i] += services[i].price;
                            serviceBookings[i]++;
                            totalOverallSales += services[i].price;
                            break;
                        }
                    }
                }

                bookingFile.close();

                // Display the overall report
                for (int i = 0; i < serviceCount; ++i) {
                    cout << left << setw(20) << services[i].name
                        << setw(15) << fixed << setprecision(2) << overallSales[i]
                        << setw(15) << serviceBookings[i] << endl;
                }
                cout << "\033[1;36m" << string(50, '-') << "\033[0m" << endl;
                cout << left << setw(20) << "Total Overall Sales"
                    << setw(15) << fixed << setprecision(2) << totalOverallSales << endl;
                cout << "\033[1;36m" << string(50, '=') << "\033[0m" << endl;
            }
            else {
                cout << "\033[1;31mError opening bookings file.\033[0m" << endl;
            }

            // Clean up dynamic arrays
            delete[] overallSales;
            delete[] serviceBookings;
            cout << endl;
            break;
        }
        default:
            // Handle invalid menu choice
            cout << "\033[1;31mInvalid choice.\033[0m" << endl;
            break;
        }
    }
};

int main() {
    BeautyServiceApp app;
    app.showMainMenu();
    return 0;
}
